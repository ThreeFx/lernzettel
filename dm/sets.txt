Mengen, Relationen und Funktionen

Definitionen:

    A = B :<=> forall x. (x in A <-> x in B)
    A = B :<=> (A subset B) ^ (B subset A)

    A subset B :<=> forall x. (x in A -> x in B)

    -- powerset
    P(A) :<=> {S | S subset A}
    |P(A)| = 2^(|A|)

    A union B :<=> {x | x in A v x in B}
    A intersect B :<=> {x | x in A ^ x in B}

    not A = {x | not (x in A)}

    B - A / B \ A :<=> {x | x in B ^ not (x in A)}

    A x B = {(a, b) | a in A ^ b in B}

    leere Menge:
    forall x. not (x in empty)

Lemma: forall A. empty subset A
Beweis:
empty subset A :<=> forall x. (x in empty -> x in A)
Weil x in empty immer falsch ist, ist die Implikation wahr für alle x.
alt. Beweis:
Annahme: Es gibt eine Menge A, sodass not (empty subset A)
  not (empty subset A) =  not (forall x. x in empty -> x in A)
                       =  not (forall x. not (x in empty) v x in A)
                       =  exists x. (not ((not (x in empty)) v x in A))
                       =  exists x. (x in empty ^ not (x in A))
                       => exists x. (x in empty) ^ exists x. (not (x in A))
                       => exists x. x in empty
                       => not (forall x. (not (x in empty)))
                       Widerspruch, da forall x. not (x in empty)

Lemma: empty is unique
Beweis:
Annahme: empty != empty', beide sind leere Mengen forall x. (not (x in A))
Da beide verschieden sind, muss eine Menge ein Element beinhalten, dass die andere
nicht besitzt. o.B.d.A. sei empty diese Menge. Dann

  exists x. (x in empty ^ not (x in empty'))

aber dies erzeugt einen Widerspruch, da forall x. (not (x in empty)).
Also ist die Annahme falsch und es gilt empty = empty'

alt. Beweis:
Seien empty, empty' leere Mengen. Zu zeigen: empty = empty'

Da empty leere Menge gilt:
  empty subset empty'
Da empty' leere Menge gilt:
  empty' subset empty

Also gilt empty = empty'

Regeln:

Idempotenz:      A union     A = A
                 A intersect A = A

Kommutativität:  A union     B = B union     A
                 A intersect B = B intersect A

Assoziativität:  A union (B union C) = (A union B) union C
                 A intersect (B intersect C) = (A intersect B) intersect C

Absorption:      A intersect (A union B) = A
                 A union (A intersect B) = A

Distributivität: A union (B intersect C) = (A union B) intersect (A union C)
                 A intersect (B union C) = (A intersect B) union (A intersect B)

Komplement:      A union (not A) = U
                 A intersect (not A) = empty

Konsistenz:      A subset B <=> (A intersect B) = A <=> (A union B) = B

Beweis: Einsetzen der Definitionen und Aussagenlogik anwenden.

Relationen

Definitionen

rho : (A x B) (rho ist TM von (A x B)) ist eine Relation und kann

    symmetrisch:     rho = (inv rho)          oder a rho b <=> b rho a
    antisymmetrisch: rho intersect (inv rho)  oder a rho b ^ b rho a => a = b
    transitiv:       rho^2 subset rho oder    oder a rho b ^ b rho c => a rho c
    reflexiv:        id subset rho            oder forall a. a rho a
    irreflexiv:      rho intersect id = empty oder forall a. not (a rho a)

a ist in Relation zu b g.d.w. (a, b) in rho:
a rho b <=> (a, b) in rho

inv rho ist definiert als:

    a rho b <-> b (inv rho) a

d.h. a (inv rho) b g.d.w. b rho a (Argumente vertauschen)
Bsp.: inv (<=) = (>=), inv (=) = (=)

Lemma: rho ist transitiv <=> rho^2 subset rho

Beweis:
(=>)
    Assume that rho is transitive and a rho^2 b.
    Zu zeigen: a rho b
    a rho^2 b <=> exists c. (a rho c ^ c rho b)
    Weil rho transitiv ist, muss a rho b also bereits in rho sein.

(<=)
    Nehme an, rho^2 subset rho. Dann, falls a rho b und b rho c,
    a rho^2 c. Aber da rho^2 subset rho, muss rho transitiv sein.

Transitiver Abschluss p^*

      inf
p^* =  U  p^n
      n=1

a rho^* b <=> exists c1 .. ck. (a rho c1 ^ c1 rho c2 ^ .. ^ ck rho b)

id_A = {(a, a) | a in A}

Komposition von Relationen

rho   subset (A x B)
sigma subset (B x C)

rho . sigma subset (A x C)
a (rho . sigma) b :<=> exists c. (a rho c ^ c sigma b)

Lemma 3.5 Komposition ist assoziativ:

(rho . sigma) . phi == rho . (sigma . phi)
       (1)                    (2)

Beweis: Zu zeigen: (1) subset (2) und (2) subset (1)
                        (i)                (ii)
(i)
    a ((rho . sigma) . phi) d :<=> exists c. (a (rho . sigma) c ^ c phi d)
    a (rho . sigma) c :<=> exists b. (a rho b ^ b sigma c)
    also:
    exists b c. (a rho b ^ b sigma c ^ c phi d)
    exists c. (b sigma c ^ c phi d) => b (sigma . phi) d
    And from a rho b ^ b (sigma . phi) d we follow that a (rho . (sigma . phi)) d
(ii)
    Analogous to (i)

Lemma 3.6 Komposition von Inversen

rho subset (A x B), sigma subset (B x C)
inv (rho . sigma) = inv sigma . inv rho

Beweis:
     c (inv (rho . sigma)) a
 <=> a (rho . sigma) c
:<=> exists b. (a rho b ^ b sigma c)
 <=> exists b. (b (inv rho) a ^ c (inv sigma) b)
 <=> exists b. (c (inv sigma) b ^ b (inv rho) a)
:<=> c (inv sigma . inv rho) a

Äquivalenzrelationen

Eine Äquivalenzrelation (~) ist

 - reflexiv
 - transitiv
 - symmetrisch

Die Äquivalenzklasse eines Elements a sei definiert als:

[a]_~ := {b in A | b ~ a}

Bsp.: (mod 3), [0]_(mod 3) = {.., -3, 0, 3, ..}

Lemma 3.8 Schnittmenge von Äquivalenzrelationen

Seien rho, sigma Äquivalenzrelationen. Dann gilt:
(rho intersect sigma) ist eine Äquivalenzrelation

Beweis:
 - reflexiv:
 id subset rho ^ id subset sigma => id subset (rho intersect sigma)
 Distributivität: (A union B) intersect (A union C) = A union (B intersect C)

 - symmetrisch:
 Betrachte (a, b) in rho.
 Es gibt zwei Fälle:
 Fall 1: (a, b) in sigma:
   (b, a) in rho und (b, a) in sigma, da beide symmetrisch.
   => {(a, b), (b, a)} subset (rho intersect sigma) => Symmetrie beibehalten
 Fall 2: not ((a, b) in sigma)
   Da (a, b) nicht in sigma kann auch (b, a) nicht in sigma sein. Also
   ist weder (a, b) noch (b, a) in (rho intersect sigma) => Symmetrie beibehalten
 Analog für (a, b) in sigma aber nicht in rho.

 - transitiv:
 Falls (a, b) und (b, c) in (rho intersect sigma), dann sind sind
 (a, b) und (b, c) auch in rho und sigma. Da rho und sigma beide transitiv sind,
 ist (a, c) auch in rho und sigma, was bedeutet, dass
 (a, c) in (rho intersect sigma) ist.

Partition

Eine Partition einer Menge A ist die Teilung in Untermengen Si, i in N, sodass
Si intersect Sj = empty, falls i != j und
  n
  U  Si = A
 i=1

Lemma 3.9 A / ~, wobei ~ Äquivalenzrelation ist eine Partition von A.
A / ~ := {[a]_~ | a in A} ist die Menge der Äquivalenzklassen von A.

Beweis:

A / ~ ist vollständig (union von allen [a]_~ ist A): trivial, da ~ reflexiv sind
alle Elemente in den Mengen [a]_~ enthalten.

A / ~ besitzt disjunkte Mengen. Betrachten wir zwei Elemente a und b. Es gilt zu
zeigen: Falls a ~ b dann ist [a]_~ = [b]_~ und falls
a !~ b: [a]_~ intersect [b]_~ = empty.

Fall 1: a ~ b. Let c be in [a]. Then:
   c in [a]
-> c ~ a
-> c ~ b
-> c in [b]
-> [a] subset [b]
The reverse follows similarily.

Fall 2: a !~ b
Nehmen wir an [a] intersect [b] != empty
Dann existiert ein c dass in sowohl [a] als auch [b] ist.
   [a] intersect [b] != empty
-> exists c. c in [a] ^ c in [b]
-> c ~ a ^ c ~ b
-> a ~ b (symm. + trans.)
-> Widerspruch.
-> [a] intersect [b] = empty

Partielle Ordnungen (posets)

Eine partielle Ordnung auf einer Menge A ist eine Relation rho, die
 - reflexiv
 - antisymmetrisch
 - transitiv
ist. Bsp.: <=, >=, subset

Def.: a < b :<=> a <= b ^ not (a = b)

Ist a <= b oder a >= b, so sind a und b vergleichbar.

Sind beliebige zwei Elemente vergleichbar, so ist die Menge A total geordnet.

Ist die Menge A wohlgeordnet und besitzt jede nicht-leere Teilmenge von A ein
kleinstes Element, so nennt man A wohlgeordnet.

b überdeckt a <=> a < b ^ not (exists c. a < c ^ c < b)

Hasse diagram: Visualisation eines posets. Falls a < b ist b höher als a. Es
werden nur Verbindungen zwischen überdeckenden Elementen gezeichet:

Bsp: ({1, 2, 3, 4, 6, 8, 12, 24}, |)

        24
       / \
      8   12
      | / |
      4   6    Bsp.: Kein Pfeil zwischen 8 und 2, da 4 dazwischen.
      | / |
      2   3
       \ /
        1

Kombination von Posets:

Für zwei posets (A, <=) und (B, [=) ist die Relation ( (=, A x B) ein poset

(a1, b1) (= (a2, b2) :<=> a1 <= a2 ^ b1 [= b2

Die lexikographische Sortierung ist ebenfalls ein poset.

(a1, b1) <=_lex (a2, b2) :<=> a1 < a2 v (a1 = a2 ^ b1 [= b2)

Besondere Elemente

(A, <=) poset, (S, <=) TM davon.

1. a in S minimal (maximal), falls
  not (exists b. b < a (b > a))
2. a in S ist das kleinste (größte) Element, falls
  forall b in S. a <= b (a >= b)
3. a in A ist untere (obere) Schranke von S, falls
  forall b in S. a <= b (a >= b)
4. a in A ist größte untere (kleinste obere) Schranke von S, falls
  a das größte (kleinste) Element aller unterer (oberer) Schranken ist.

größte untere Schranke - greatest lower bound - glb
kleinste obere Schranke - least upper bound - lub

Verbände (lattices), meets, joins

Sei (A, <=) ein poset
Zwischen zwei Elementen a und b sind meet und join folgendermaßen definiert:

meet(a, b) :<=> größte untere Schranke der TM {a, b}
join(a, b) :<=> kleinste obere Schranke der TM {a, b}

Besitzen alle zwei Elemente aus A ein meet und ein join, so ist A ein Verband.

Funktionen

Funktionen sind besondere Relationen, die zwei weitere Eigenschaften erfüllen:

f : A -> B
f geht von Definitionsbereich (domain) A nach Wertebereich (codomain) B

1. forall a. exists b. f(a) = b
(f ist total)

2. forall a . forall b b'. f(a) = b ^ f(a) = b' => b = b'
(f ist wohldefiniert - ein Wert a besitzt einen eindeutigen Funktionswert b)

Es gibt partielle Funktionen. Für diese muss 1. nicht erfüllt sein.

Zwei Funktionen f und g sind gleich, wenn sie als Relationen gleich sind.
f = g :<=> forall a. f(a) = g(a)

f : A -> B, S subset A. Image of S under f:
f(S) = {f(a) | a in S} subset B

Funktionen können

 - injektiv: a != b -> f(a) != f(b)
 - surjektiv: forall b. exists a. f(a) = b
sein.

Eine Funktion die in- und surjektiv ist nennt man auch bijektiv.

Bijektive Funktionen sind invertibel.

Funktionenkomposition

(f . g)(x) = f(g(x))
rechts-nach-links

Funktionenkomposition ist assoziativ.

Beweis:
  f . (g . h) = f((g . h)(x)) = f(g(h(x))) = (f . g)(h(x)) = (f . g) . h

B^A: Menge der Fkt von A nach B falls A und B endlich.

Abzählbarkeit

Eine Menge A ist genau dann abzählbar, wenn eine injektive Abbildung A -> N
erzeugt werden kann.

